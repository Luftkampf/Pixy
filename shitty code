
// SPI - Version: Latest 
#include <SPI.h>
// SoftwareSerial - Version: Latest 
#include <SoftwareSerial.h>
// Pixy - Version: Latest 
#include <Pixy.h>
// Servo - Version: Latest 
#include <Servo.h>
//Seperate includes
#include <math.h>


//Standard Namespace
using namespace std;

//create pixy object
Pixy pixy;

//Dimensions of object for Pixy calibration. Must be entered
  float hObject = 0;
  float wObject = 0;
//Calibration distance. Entered manually from pixy calibration
  float distanceH = 0;
  float distanceW = 0;
//Calibration distance actual. Measured manually using ruler
  float distanceR = 0;
//Pixy specific variables (focal length)  
  int pixyH;
  int pixyW;
  
  
  class pixyValues{
  
  private:
  //Pixel dimensions from pixy
  int pixelH;
  int pixelW;
  //Distance actual
  float dH;
  float dW;
  //Block variable
  int j;
  //Desired distance value
  float zVal;
  
  public:
  
  int blocks = pixy.getBlocks();
  
  //j is settable through main
  void jSet(int j1){
    j = j1;
  }
  
  //return dimensions using values read from pixy blocks
  float zDim(){
    pixelH = pixy.blocks[j].width;
    pixelW = pixy.blocks[j].height;
    dH = (hObject * pixyH) / pixelH;
    dW = (wObject * pixyW) / pixelW;
    zVal = (dH + dW)/2;
    
    return zVal;
  }//end zDim  
  float xDim(){
    return pixy.blocks[j].x;
  }//end xDim  
  float yDim(){
    return pixy.blocks[j].y;
  }//end yDim
  //end dimentional functions
  
  void pixyOperation(){
  //following code lifted from the pixy open source
  //should work for our purposes but may need to be edited
    static int i = 0;
      int j;
      char buf[32];
  
      // If there are detect blocks, print them!
      if (blocks)
      {
        i++;
    
        // do this (print) every 50 frames because printing every
        // frame would bog down the Arduino
        if (i%50==0)
        {
          sprintf(buf, "Detected %d:\n", blocks);
          Serial.print(buf);
          for (j=0; j<blocks; j++)
          {
            sprintf(buf, "  block %d: ", j);
            Serial.print(buf); 
            pixy.blocks[j].print();
         }//end for
       }//end nested if
     }//end if  
  }//end shamelessly lifted code
  
};

void setup(){
Serial.begin(9600);
//begin pixy setup
  pixy.init();
  //Calibration of Pixy z value
    //using variables from calibration
      //wObject, hObject
      //distanceW, distanceH
    //Focal length calculations
    pixyH = (distanceH * distanceR)/ hObject;
    pixyW = (distanceW * distanceR)/ wObject;
    }
